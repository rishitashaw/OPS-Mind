# OpsMind Environment Configuration Template
# Copy this file to .env and fill in your values

# ============================================
# Core Configuration
# ============================================

# Google Cloud Project ID (required)
GOOGLE_CLOUD_PROJECT=your-gcp-project-id

# Google API Key for Gemini (required)
# Get this from Google Cloud Console > APIs & Services > Credentials
GOOGLE_API_KEY=your-google-api-key

# Use Vertex AI for Google GenAI (recommended for production)
# Set to TRUE for GCP deployment, FALSE for local development
GOOGLE_GENAI_USE_VERTEXAI=TRUE

# Gemini model to use
MODEL=gemini-2.0-flash-001

# ============================================
# Jira Integration (Optional)
# ============================================

# Enable Jira real-time connector
JIRA_ENABLED=FALSE

# Jira instance URL
JIRA_BASE_URL=https://your-company.atlassian.net

# Jira authentication
JIRA_USERNAME=your-email@company.com
JIRA_API_TOKEN=your-jira-api-token

# Jira project keys to monitor (comma-separated)
JIRA_PROJECT_KEYS=PROJ1,PROJ2,PROJ3

# Polling interval for Jira updates (seconds)
JIRA_POLL_INTERVAL=300

# ============================================
# GCP Deployment Configuration
# ============================================

# GCP Region for deployment
GCP_REGION=us-central1

# Cloud Run service name
SERVICE_NAME=opsmind

# Docker image name
IMAGE_NAME=opsmind

# Cloud Storage bucket for datasets
DATASETS_BUCKET=your-project-id-opsmind-datasets

# ============================================
# GCP Cloud Storage for Postmortem Files
# ============================================

# Enable GCP Cloud Storage for postmortem files
GCP_STORAGE_ENABLED=TRUE

# GCP Project ID for Cloud Storage
GCP_PROJECT_ID=your-gcp-project-id

# GCP bucket name for postmortem files
GCP_BUCKET_NAME=your-project-id-opsmind-postmortems

# Folder within bucket for postmortem files
GCP_POSTMORTEM_FOLDER=postmortems

# Download link expiration (days)
GCP_FILE_EXPIRATION_DAYS=30

# ============================================
# Application Configuration
# ============================================

# Application port (default for Cloud Run)
PORT=8080

# Log level (DEBUG, INFO, WARNING, ERROR, CRITICAL)
LOG_LEVEL=INFO

# Enable development mode (FALSE for production)
DEBUG=FALSE

# ============================================
# Security Configuration
# ============================================

# Enable safety guardrails
SAFETY_ENABLED=TRUE

# Rate limiting (requests per minute)
RATE_LIMIT_REQUESTS=60

# Enable content filtering
CONTENT_FILTERING_ENABLED=TRUE

# ============================================
# Performance Configuration
# ============================================

# Maximum concurrent requests
MAX_CONCURRENT_REQUESTS=10

# Request timeout (seconds)
REQUEST_TIMEOUT=300

# Memory limit (for local development)
MEMORY_LIMIT=4Gi

# CPU limit (for local development)
CPU_LIMIT=2000m

# ============================================
# Data Configuration
# ============================================

# Dataset paths (automatically configured for GCP)
INCIDENTS_DATASET_PATH=gs://your-project-id-opsmind-datasets/incidents/
JIRA_DATASET_PATH=gs://your-project-id-opsmind-datasets/jira/

# Cache configuration
ENABLE_CACHE=TRUE
CACHE_TTL=3600

# ============================================
# Monitoring and Observability
# ============================================

# Enable application metrics
METRICS_ENABLED=TRUE

# Enable health checks
HEALTH_CHECK_ENABLED=TRUE

# Enable request tracing
TRACING_ENABLED=TRUE

# ============================================
# Development Configuration
# ============================================

# Enable hot reload (development only)
HOT_RELOAD=FALSE

# Enable debug logging
DEBUG_LOGGING=FALSE

# Enable development UI features
DEV_UI_ENABLED=FALSE

# ============================================
# Instructions
# ============================================

# 1. Copy this file to .env:
#    cp env.template .env

# 2. Edit .env with your actual values

# 3. For local development:
#    - Set GOOGLE_GENAI_USE_VERTEXAI=FALSE
#    - Set DEBUG=TRUE
#    - Set LOG_LEVEL=DEBUG

# 4. For GCP deployment:
#    - Set GOOGLE_GENAI_USE_VERTEXAI=TRUE
#    - Set DEBUG=FALSE
#    - Set LOG_LEVEL=INFO

# 5. For Jira integration:
#    - Set JIRA_ENABLED=TRUE
#    - Configure JIRA_* variables
#    - Create API token: https://id.atlassian.com/manage-profile/security/api-tokens

# 6. For dataset access:
#    - Download datasets from Kaggle (see README.md)
#    - Upload to Cloud Storage using deployment script
#    - Ensure proper permissions are set

# 7. For GCP Cloud Storage (postmortem files):
#    - Create a bucket for postmortem files
#    - Set GCP_STORAGE_ENABLED=TRUE
#    - Configure GCP_PROJECT_ID and GCP_BUCKET_NAME
#    - Ensure your service account has Storage Object Creator/Viewer permissions
#    - For local development, set up Application Default Credentials:
#      gcloud auth application-default login 